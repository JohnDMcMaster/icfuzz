#!/usr/bin/env python3
from collections import OrderedDict
import re
import glob
from PIL import Image
import os
import shutil
import math
from bpwahk import BPWAHK, hexdump
import json

def make_jed(words):
    """
    00000000  02 0d 0a 4a 45 44 45 43  20 66 69 6c 65 20 67 65  |...JEDEC file ge|

    JEDEC file generated by 1410/84 from PAL16R8A2 01/18/21 01:02:38*
    DM National Semiconductor*
    DD PAL16R8A2*
    QF2048*
    G0*
    F0*
    L00000 11111111111111111111111111111111*
    L00032 11111111111111111111111111111111*
    L00064 10000000000000000000000000000000*
    ...
    # 02 => STX
    """
    ret = """\
\x02\r\n\
JEDEC file generated by 1410/84 from PAL16R8A2 01/18/21 01:02:38*\r\n\
DM National Semiconductor*\r\n\
DD PAL16R8A2*\r\n\
QF2048*\r\n\
G0*\r\n\
F0*\r\n\
"""
    wordi = 0
    checksum = 0
    for addr in range(0, 32 * 64, 32):
        # L00032 11111111111111111111111111111111*
        # print(addr, wordi)
        word32 = words[wordi]
        if type(word32) is list:
            word32 = ''.join(word32)
        assert len(word32) == 32
        ret += "L%05u %s*\r\n" % (addr, word32)
        word32 = word32[::-1]
        checksum = (checksum + int(word32[0:8], 2) + int(word32[8:16], 2) + int(word32[16:24], 2) + int(word32[24:32], 2)) % 0x10000
        wordi += 1

    # 16 bit sum (truncated) of the 8 bit fields
    # checksum = 0
    ret += "C%04X*\r\n" % checksum
    # 03 => ETX
    # 3.2 Computing the Transmission Checksum
    # Includes all characters include STX and ETX
    tx_csum = sum([ord(x) for x in ret]) % 0x10000
    # I messed up the TX checksum, but evidently BP ignores 0000
    tx_csum = 0
    ret += "\x03%04X" % tx_csum

    return ret

def run(ahk_dir, im_dir, bp):
    assert os.path.exists(ahk_dir)
    assert os.path.exists(im_dir)

    # assert len(set(glob.glob(im_dir + "/*.jpg"))) == 0, "Unclean image dir"

    def ahk_tx_file(buff, basename):
        open(os.path.join(ahk_dir, basename), "w").write(buff)

    def wait_next_image():
        """Returns canonical path"""
        orig_images = set(glob.glob(im_dir + "/*.jpg"))
        while True:
            new_images = set(glob.glob(im_dir + "/*.jpg")) - orig_images
            if len(new_images):
                break
        assert len(new_images) == 1
        return list(new_images)[0]

    words = [list("0" * 32) for _x in range(64)]
    words[1][3] = "1"
    print("write test")
    ahk_tx_file(make_jed(words), "tmp.jed")
    bp.open_data("tmp.jed")
    return
    
    # Synchronize imager
    jf = open("out.json", "w")
    print("Synchronizing...")
    sync_im = wait_next_image()
    print("Sync to image %s" % sync_im)
    for wordi in range(64):
        for biti in range(32):
            words[wordi][biti] = "1"
            print("Capturing word %04u, bit %02u" % (wordi, biti))
            # print(words)
            print("  Sending data")
            ahk_tx_file(make_jed(words), "tmp.jed")

            print("  Loading data")
            bp.open_data("tmp.jed")
            print("  Programming")
            bp.program()
            print("  Waiting for image")
            last_fn = os.path.basename(wait_next_image())
            j = {
                "fn": last_fn,
                "word": wordi,
                "bit": biti,
                }
            jf.write(json.dumps(j) + '\n')
            jf.flush()

            # Don't blow additional fuses until ready
            """
            if biti >= 7:
                print("DEBUG ABORT")
                return
            """

if 0:
    import sys
    print("Test1")
    words = ["0" * 32 for _x in range(64)]
    open("tmp.jed", "w").write(make_jed(words))
    sys.exit(1)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='')
    parser.add_argument('--bp-host', type=str, default=None)
    parser.add_argument('--bp-port', type=int, default=None)
    parser.add_argument('--ahk-dir', default="/run/user/1000/gvfs/smb-share:server=192.168.0.247,share=buf/rom/ahk/out", help='AHK temp file directory')
    parser.add_argument('--im-dir', default="/run/user/1000/gvfs/smb-share:server=192.168.0.247,share=buf/ir/out", help='jpg file directory')
    args = parser.parse_args()

    bp = BPWAHK(host=args.bp_host, port=args.bp_port)
    run(ahk_dir=args.ahk_dir, im_dir=args.im_dir, bp=bp)
